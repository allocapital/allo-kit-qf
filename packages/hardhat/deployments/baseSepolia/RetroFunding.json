{
  "address": "0x156BbFd1B33Dd31a53b2e1F0D51DEe9658E0E8bc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_schema",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct PoolConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Allocate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Approve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct PoolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejecter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Reject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "_allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "_distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_reject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "allocationToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "distributionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct PoolConfig",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registrations",
      "outputs": [
        {
          "internalType": "enum IPool.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "reject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x129f522023af7a237112cf7420bdc6079c903e55607e2328a7fa834c5727054e",
  "receipt": {
    "to": null,
    "from": "0x8595e36857743A1C517e00179e6bA6D170DD1F51",
    "contractAddress": "0x156BbFd1B33Dd31a53b2e1F0D51DEe9658E0E8bc",
    "transactionIndex": 49,
    "gasUsed": "1895248",
    "logsBloom": "0x
    "blockHash": "0xe92dcfdf01aff6cca9effad6cf8e7ede89acedf51cd26f8e8693d36b0bd6cbca",
    "transactionHash": "0x129f522023af7a237112cf7420bdc6079c903e55607e2328a7fa834c5727054e",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 26626293,
        "transactionHash": "0x129f522023af7a237112cf7420bdc6079c903e55607e2328a7fa834c5727054e",
        "address": "0x156BbFd1B33Dd31a53b2e1F0D51DEe9658E0E8bc",
        "topics": [
          "0x432d5e51ce671e91daae7448ef02fde36fd474baf4f93d31ff4ace1ad9a1a6bd",
          "0x0000000000000000000000008595e36857743a1c517e00179e6ba6d170dd1f51"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000c526574726f46756e64696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e75696e7432353620616d6f756e740000000000000000000000000000000000000000000000000000000000008595e36857743a1c517e00179e6ba6d170dd1f5100000000000000000000000000000000000000000000000000000000000000e
        "logIndex": 254,
        "blockHash": "0xe92dcfdf01aff6cca9effad6cf8e7ede89acedf51cd26f8e8693d36b0bd6cbca"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 26626293,
        "transactionHash": "0x129f522023af7a237112cf7420bdc6079c903e55607e2328a7fa834c5727054e",
        "address": "0x156BbFd1B33Dd31a53b2e1F0D51DEe9658E0E8bc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008595e36857743a1c517e00179e6ba6d170dd1f51"
        ],
        "data": "0x",
        "logIndex": 255,
        "blockHash": "0xe92dcfdf01aff6cca9effad6cf8e7ede89acedf51cd26f8e8693d36b0bd6cbca"
      }
    ],
    "blockNumber": 26626293,
    "cumulativeGasUsed": "9818924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "RetroFunding",
    "uint256 amount",
    {
      "owner": "0x8595e36857743A1C517e00179e6bA6D170DD1F51",
      "allocationToken": "0x0000000000000000000000000000000000000000",
      "distributionToken": "0x0000000000000000000000000000000000000000",
      "maxAmount": "0",
      "metadataURI": "",
      "admins": [],
      "timestamps": []
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "68abb0f96633951c4834d81434b5b092",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_schema\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct PoolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejecter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Reject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"_allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"_distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrations\",\"outputs\":[{\"internalType\":\"enum IPool.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/RetroFunding.sol\":\"RetroFunding\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct PoolConfig {\\n    address owner;\\n    address[] admins;\\n    address allocationToken;\\n    address distributionToken;\\n    uint256 maxAmount;\\n    uint64[] timestamps;\\n    string metadataURI;\\n}\\n\\ninterface IPool {\\n    enum Status {\\n        pending,\\n        approved,\\n        rejected\\n    }\\n\\n    struct Registration {\\n        Status status;\\n        address owner;\\n        string metadataURI;\\n        bytes data; // Data can contain information that can be accessed later\\n    }\\n\\n    event Deployed(string name, address indexed owner, string schema, PoolConfig config);\\n    event Allocate(address indexed from, address indexed to, uint256 amount, address token, bytes data);\\n    event Register(address indexed project, address indexed owner, string metadataURI, bytes data);\\n    event Approve(address indexed project, address indexed approver, string metadataURI, bytes data);\\n    event Reject(address indexed project, address indexed rejecter, string metadataURI, bytes data);\\n    event Update(address indexed project, address indexed updater, string metadataURI, bytes data);\\n\\n\\n    function initialize(PoolConfig memory config, bytes memory data) external;\\n\\n    function _register(address project, string memory metadataURI, bytes memory data) external;\\n    function _update(address project, string memory metadataURI, bytes memory data) external;\\n    function _approve(address project, string memory metadataURI, bytes memory data) external;\\n    function _allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        external;\\n    function _distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        external;\\n}\\n\\n/*\\nTypes of Pools:\\nDirectGrants - pool manager transfer funds directly to projects\\nRetroFunding - selected voters vote on projects and pool gets distributed based on the votes\\nQuadraticFunding - people vote with money tokens and get matching funds from the pool based on quadratic formula\\nDedicatedDomainAllocation - selected panel of domain experts decide what projects receive matching funds\\nRFPs\\nBounties\\nCrowdfunding\\n*/\\ncontract Pool is IPool {\\n    bool private _initialized;\\n    PoolConfig public config;\\n\\n    mapping(address => Registration) public registrations;\\n\\n\\n    constructor(string memory _name, string memory _schema, PoolConfig memory _config) {\\n        // strategyName = _name;\\n        // schema = _schema;\\n        // metadataURI = _metadataURI;\\n        // id = keccak256(abi.encode(strategyName));\\n        emit Deployed(_name, msg.sender, _schema, _config);\\n    }\\n\\n\\n  function initialize(PoolConfig memory _config, bytes memory ) external virtual {\\n    require(!_initialized, \\\"Already initialized\\\");\\n    _initialized = true;\\n    config = _config;\\n  }\\n\\n    // MetadataURI contain details about project application\\n    function _register(address project, string memory _metadataURI, bytes memory data) public {\\n        require(registrations[project].owner == address(0), \\\"Already registered\\\");\\n        registrations[project] = Registration(Status.pending, msg.sender, _metadataURI, data);\\n        emit Register(project, msg.sender, _metadataURI, data);\\n    }\\n\\n    function _reject(address project, string memory _metadataURI, bytes memory data) public virtual {\\n        Registration storage registration = registrations[project];\\n        require(registration.status == Status.pending || registration.status == Status.approved, \\\"Already deregistered\\\");\\n        registration.status = Status.rejected;\\n        emit Reject(project, msg.sender, _metadataURI, data);\\n    }\\n\\n    // MetadataURI can contain Review information\\n    function _approve(address project, string memory _metadataURI, bytes memory data) public virtual {\\n        Registration storage registration = registrations[project];\\n        require(registration.status == Status.pending, \\\"Already approved or not registered yet\\\");\\n        registration.status = Status.approved;\\n        // MetadataURI here is Review information so we don't need to store it\\n        emit Approve(project, msg.sender, _metadataURI, data);\\n    }\\n\\n    function _update(address project, string memory _metadataURI, bytes memory data) public {\\n        require(registrations[project].status == Status.pending, \\\"Already approved or not registered yet\\\");\\n        require(registrations[project].owner == msg.sender, \\\"Must be owner to update\\\");\\n        registrations[project].metadataURI = _metadataURI;\\n        registrations[project].data = data;\\n        emit Update(project, msg.sender, _metadataURI, data);\\n    }\\n\\n    // Allocate tokens to recipients (transfers tokens from caller to recipients)\\n    // This can be used to transfer tokens to projects, or the contract itself to fund with matching funds for example\\n    function _allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        public\\n        virtual\\n    {\\n        uint256 length = recipients.length;\\n        require(length > 0 && length == amounts.length, \\\"Mismatched lengths\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory _data = i < data.length ? data[i] : bytes(\\\"\\\");\\n            require(recipients[i] != address(0), \\\"Recipient is zero address\\\");\\n            require(amounts[i] > 0, \\\"Amount is zero\\\");\\n            _beforeAllocate(recipients[i], amounts[i], token, _data);\\n            IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]);\\n            emit Allocate(msg.sender, recipients[i], amounts[i], token, _data);\\n        }\\n    }\\n\\n    // Distribute tokens to recipients (transfers tokens from the contract to recipients)\\n    // Can be used to distribute matching funds to projects\\n    function _distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\n        public\\n        virtual\\n    {\\n        uint256 length = recipients.length;\\n        require(length > 0 && length == amounts.length, \\\"Mismatched lengths\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory _data = i < data.length ? data[i] : bytes(\\\"\\\");\\n            require(recipients[i] != address(0), \\\"Recipient is zero address\\\");\\n            require(\\n                amounts[i] > 0 && amounts[i] <= IERC20(token).balanceOf(address(this)),\\n                \\\"Amount is zero or exceeds balance\\\"\\n            );\\n            _beforeDistribute(recipients[i], amounts[i], token, _data);\\n            IERC20(token).transfer(recipients[i], amounts[i]);\\n            emit Allocate(address(this), recipients[i], amounts[i], token, _data);\\n        }\\n    }\\n\\n    function _beforeAllocate(address recipient, uint256 amount, address token, bytes memory data) internal virtual {}\\n    function _beforeDistribute(address recipient, uint256 amount, address token, bytes memory data) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe466d05ffdf3fcdafdde429322767a3f60a3890c07f6e7c8e5808fba90d44d81\",\"license\":\"MIT\"},\"contracts/strategies/RetroFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport { Pool, PoolConfig } from \\\"../Pool.sol\\\";\\n\\ncontract RetroFunding is Pool, Context, AccessControl, ReentrancyGuard {\\n    constructor(string memory _name, string memory _schema, PoolConfig memory _config) Pool(_name, _schema, _config) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, config.owner);\\n        for (uint256 i = 0; i < config.admins.length; i++) {\\n            _grantRole(DEFAULT_ADMIN_ROLE, config.admins[i]);\\n        }\\n    }\\n\\n    function initialize(PoolConfig memory _config, bytes calldata data) public override {\\n        // super.initialize(_config, data);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _config.owner);\\n        for (uint256 i = 0; i < _config.admins.length; i++) {\\n            _grantRole(DEFAULT_ADMIN_ROLE, _config.admins[i]);\\n        }\\n    }\\n\\n    // constructor(PoolConfig memory _config) Pool(_config) {\\n    //     config = _config;\\n\\n    // _grantRole(DEFAULT_ADMIN_ROLE, config.owner);\\n    // for (uint256 i = 0; i < config.admins.length; i++) {\\n    //     _grantRole(DEFAULT_ADMIN_ROLE, config.admins[i]);\\n    // }\\n    // }\\n\\n    // MetadataURI contain details about project application\\n    function register(address project, string memory _metadataURI, bytes memory data) external {\\n        _register(project, _metadataURI, data);\\n    }\\n\\n    function reject(\\n        address project,\\n        string memory _metadataURI,\\n        bytes memory data\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _reject(project, _metadataURI, data);\\n    }\\n\\n    // MetadataURI can contain Review information\\n    function approve(\\n        address project,\\n        string memory _metadataURI,\\n        bytes memory data\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _approve(project, _metadataURI, data);\\n    }\\n\\n    function update(address project, string memory _metadataURI, bytes memory data) external {\\n        _update(project, _metadataURI, data);\\n    }\\n\\n    function allocate(\\n        address[] memory recipients,\\n        uint256[] memory amounts,\\n        address token,\\n        bytes[] memory data\\n    ) external nonReentrant {\\n        require(\\n            token == config.allocationToken || token == config.distributionToken,\\n            \\\"Allocations to projects must be allocation or distribution token\\\"\\n        );\\n\\n        _allocate(recipients, amounts, token, data);\\n    }\\n\\n    function distribute(\\n        address[] memory recipients,\\n        uint256[] memory amounts,\\n        address token,\\n        bytes[] memory data\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        require(token == config.distributionToken, \\\"Distributions must be distribution token\\\");\\n        _distribute(recipients, amounts, token, data);\\n    }\\n\\n    function _beforeAllocate(address recipient, uint256 amount, address token, bytes memory data) internal override {\\n        require(\\n            recipient == address(this) || registrations[recipient].status == Status.approved,\\n            \\\"Recipient is not approved\\\"\\n        );\\n\\n        if (token == config.distributionToken) {\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            require(config.maxAmount == 0 || amount + balance <= config.maxAmount  , \\\"Max amount reached\\\");\\n        }\\n    }\\n\\n    function _beforeDistribute(address recipient, uint256 amount, address token, bytes memory data) internal override {\\n        require(registrations[recipient].status == Status.approved, \\\"Recipient is not approved\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5b1425e22b4c177605af6b76c9852df44a15c0194e1638d6b0f5099cb62f7d07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026d7380380620026d7833981016040819052620000349162000402565b828282336001600160a01b03167f432d5e51ce671e91daae7448ef02fde36fd474baf4f93d31ff4ace1ad9a1a6bd8484846040516200007693929190620005cc565b60405180910390a250506001600a81905554620000a091506000906001600160a01b031662000109565b5060005b600254811015620000ff5760028054620000e99160009184908110620000ce57620000ce620006e0565b6000918252602090912001546001600160a01b031662000109565b5080620000f681620006f6565b915050620000a4565b505050506200071e565b60008281526009602090815260408083206001600160a01b038516845290915281205460ff16620001b25760008381526009602090815260408083206001600160a01b03861684529091529020805460ff19166001179055620001693390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001620001b6565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715620001f757620001f7620001bc565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002285762000228620001bc565b604052919050565b60005b838110156200024d57818101518382015260200162000233565b50506000910152565b600082601f8301126200026857600080fd5b81516001600160401b03811115620002845762000284620001bc565b62000299601f8201601f1916602001620001fd565b818152846020838601011115620002af57600080fd5b620002c282602083016020870162000230565b949350505050565b80516001600160a01b0381168114620002e257600080fd5b919050565b60006001600160401b03821115620003035762000303620001bc565b5060051b60200190565b600082601f8301126200031f57600080fd5b81516020620003386200033283620002e7565b620001fd565b82815260059290921b840181019181810190868411156200035857600080fd5b8286015b848110156200037e576200037081620002ca565b83529183019183016200035c565b509695505050505050565b600082601f8301126200039b57600080fd5b81516020620003ae6200033283620002e7565b82815260059290921b84018101918181019086841115620003ce57600080fd5b8286015b848110156200037e5780516001600160401b0381168114620003f45760008081fd5b8352918301918301620003d2565b6000806000606084860312156200041857600080fd5b83516001600160401b03808211156200043057600080fd5b6200043e8783880162000256565b945060208601519150808211156200045557600080fd5b620004638783880162000256565b935060408601519150808211156200047a57600080fd5b9085019060e082880312156200048f57600080fd5b62000499620001d2565b620004a483620002ca565b8152602083015182811115620004b957600080fd5b620004c7898286016200030d565b602083015250620004db60408401620002ca565b6040820152620004ee60608401620002ca565b60608201526080830151608082015260a0830151828111156200051057600080fd5b6200051e8982860162000389565b60a08301525060c0830151828111156200053757600080fd5b620005458982860162000256565b60c0830152508093505050509250925092565b600081518084526200057281602086016020860162000230565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015620005c15781516001600160401b0316875295820195908201906001016200059a565b509495945050505050565b606081526000620005e1606083018662000558565b602083820381850152620005f6828762000558565b848103604086015285516001600160a01b0390811682528287015160e084840181905281519084018190529294508301916000906101008601905b80831015620006555784518416825293850193600192909201919085019062000631565b50604089015194506200067360408701866001600160a01b03169052565b606089015194506200069060608701866001600160a01b03169052565b6080890151608087015260a0890151945085810360a0870152620006b5818662000586565b94505050505060c085015182820360c0840152620006d4828262000558565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200071757634e487b7160e01b600052601160045260246000fd5b5060010190565b611fa9806200072e6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806379b881af116100b8578063ab21f5071161007c578063ab21f507146102b7578063c922da54146102ca578063d547741f146102dd578063eede8aea146102f0578063f2e330d814610303578063f96423561461031657600080fd5b806379b881af1461025357806391d1485414610266578063942e6bcf146102795780639cdd2f9a1461029c578063a217fddf146102af57600080fd5b806336568abe1161010a57806336568abe146101db57806358086775146101ee5780635cf90985146102015780635e5de15114610214578063747ffca21461022757806379502c551461023a57600080fd5b806301ffc9a7146101475780630d17579a1461016f578063248a9ca3146101845780632628fb1c146101b55780632f2ff15d146101c8575b600080fd5b61015a61015536600461162b565b610329565b60405190151581526020015b60405180910390f35b61018261017d366004611758565b610360565b005b6101a76101923660046117cc565b60009081526009602052604090206001015490565b604051908152602001610166565b6101826101c33660046118fb565b61037c565b6101826101d63660046119e9565b610722565b6101826101e93660046119e9565b610747565b6101826101fc366004611758565b61077f565b61018261020f366004611758565b61078a565b610182610222366004611758565b6108e0565b6101826102353660046118fb565b6109cb565b610242610a69565b604051610166959493929190611a5b565b610182610261366004611758565b610b1c565b61015a6102743660046119e9565b610c73565b61028c610287366004611aa1565b610c9e565b6040516101669493929190611ad2565b6101826102aa3660046118fb565b610de5565b6101a7600081565b6101826102c5366004611be6565b6110e1565b6101826102d8366004611758565b61113d565b6101826102eb3660046119e9565b611148565b6101826102fe3660046118fb565b61116d565b610182610311366004611758565b611228565b610182610324366004611758565b6112be565b60006001600160e01b03198216637965db0b60e01b148061035a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061036b816112d4565b610376848484611228565b50505050565b8351801580159061038d5750835181145b6103d35760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064015b60405180910390fd5b60005b8181101561071a576000835182106103fd5760405180602001604052806000815250610418565b83828151811061040f5761040f611d02565b60200260200101515b905060006001600160a01b031687838151811061043757610437611d02565b60200260200101516001600160a01b0316036104915760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103ca565b60008683815181106104a5576104a5611d02565b602002602001015111801561053a57506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611d18565b86838151811061052f5761052f611d02565b602002602001015111155b6105905760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973207a65726f206f7220657863656564732062616c616e636044820152606560f81b60648201526084016103ca565b6105ce8783815181106105a5576105a5611d02565b60200260200101518784815181106105bf576105bf611d02565b602002602001015187846112e1565b846001600160a01b031663a9059cbb8884815181106105ef576105ef611d02565b602002602001015188858151811061060957610609611d02565b60200260200101516040518363ffffffff1660e01b81526004016106429291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190611d31565b5086828151811061069857610698611d02565b60200260200101516001600160a01b0316306001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b758885815181106106e6576106e6611d02565b602002602001015188856040516106ff93929190611d53565b60405180910390a3508061071281611d9c565b9150506103d6565b505050505050565b60008281526009602052604090206001015461073d816112d4565b6103768383611359565b6001600160a01b03811633146107705760405163334bd91960e11b815260040160405180910390fd5b61077a82826113ed565b505050565b61077a838383610b1c565b6001600160a01b03831660009081526008602052604081205460ff1660028111156107b7576107b7611abc565b146107d45760405162461bcd60e51b81526004016103ca90611db5565b6001600160a01b0383811660009081526008602052604090205461010090041633146108425760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206f776e657220746f2075706461746500000000000000000060448201526064016103ca565b6001600160a01b03831660009081526008602052604090206001016108678382611e7b565b506001600160a01b038316600090815260086020526040902060020161088d8282611e7b565b50336001600160a01b0316836001600160a01b03167f639b764af06689bf35c6ebc1ae49051aa4b4d3a3d34d5c70bf8626087352e99d84846040516108d3929190611f3b565b60405180910390a3505050565b6001600160a01b038316600090815260086020526040812090815460ff16600281111561090f5761090f611abc565b148061093057506001815460ff16600281111561092e5761092e611abc565b145b6109735760405162461bcd60e51b8152602060048201526014602482015273105b1c9958591e4819195c9959da5cdd195c995960621b60448201526064016103ca565b805460ff1916600217815560405133906001600160a01b038616907f11d876319772a42984e532feb89f8d20206a23ba4b556142b7cdfc277efc8435906109bd9087908790611f3b565b60405180910390a350505050565b60006109d6816112d4565b6109de61145a565b6004546001600160a01b03848116911614610a4c5760405162461bcd60e51b815260206004820152602860248201527f446973747269627574696f6e73206d757374206265206469737472696275746960448201526737b7103a37b5b2b760c11b60648201526084016103ca565b610a588585858561037c565b610a626001600a55565b5050505050565b60018054600354600454600554600780546001600160a01b039586169694861695909316939192610a9990611dfb565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac590611dfb565b8015610b125780601f10610ae757610100808354040283529160200191610b12565b820191906000526020600020905b815481529060010190602001808311610af557829003601f168201915b5050505050905085565b6001600160a01b0383811660009081526008602052604090205461010090041615610b7e5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016103ca565b60408051608081018252600080825233602080840191909152828401869052606083018590526001600160a01b0387168252600890529190912081518154829060ff19166001836002811115610bd657610bd6611abc565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b031990911617815560408201516001820190610c159082611e7b565b5060608201516002820190610c2a9082611e7b565b50905050336001600160a01b0316836001600160a01b03167f99202cc5abf24650e7ac53e3a81ff614768dcc7569a245376ed82eb4ce243fca84846040516108d3929190611f3b565b60009182526009602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6008602052600090815260409020805460018201805460ff8316936101009093046001600160a01b0316929190610cd490611dfb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0090611dfb565b8015610d4d5780601f10610d2257610100808354040283529160200191610d4d565b820191906000526020600020905b815481529060010190602001808311610d3057829003601f168201915b505050505090806002018054610d6290611dfb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e90611dfb565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b5050505050905084565b83518015801590610df65750835181145b610e375760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103ca565b60005b8181101561071a57600083518210610e615760405180602001604052806000815250610e7c565b838281518110610e7357610e73611d02565b60200260200101515b905060006001600160a01b0316878381518110610e9b57610e9b611d02565b60200260200101516001600160a01b031603610ef55760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103ca565b6000868381518110610f0957610f09611d02565b602002602001015111610f4f5760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016103ca565b610f8d878381518110610f6457610f64611d02565b6020026020010151878481518110610f7e57610f7e611d02565b60200260200101518784611484565b846001600160a01b03166323b872dd33898581518110610faf57610faf611d02565b6020026020010151898681518110610fc957610fc9611d02565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c9190611d31565b5086828151811061105f5761105f611d02565b60200260200101516001600160a01b0316336001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b758885815181106110ad576110ad611d02565b602002602001015188856040516110c693929190611d53565b60405180910390a350806110d981611d9c565b915050610e3a565b82516110ef90600090611359565b5060005b8360200151518110156103765761112a6000801b8560200151838151811061111d5761111d611d02565b6020026020010151611359565b508061113581611d9c565b9150506110f3565b61077a83838361078a565b600082815260096020526040902060010154611163816112d4565b61037683836113ed565b61117561145a565b6003546001600160a01b038381169116148061119e57506004546001600160a01b038381169116145b611212576040805162461bcd60e51b81526020600482015260248101919091527f416c6c6f636174696f6e7320746f2070726f6a65637473206d7573742062652060448201527f616c6c6f636174696f6e206f7220646973747269627574696f6e20746f6b656e60648201526084016103ca565b61121e84848484610de5565b6103766001600a55565b6001600160a01b038316600090815260086020526040812090815460ff16600281111561125757611257611abc565b146112745760405162461bcd60e51b81526004016103ca90611db5565b805460ff1916600117815560405133906001600160a01b038616907f07597d52fbe13ba7ca9294f77eecd20c5d40bcd8752753651f416e64a0f7d77c906109bd9087908790611f3b565b60006112c9816112d4565b6103768484846108e0565b6112de81336115ee565b50565b60016001600160a01b03851660009081526008602052604090205460ff16600281111561131057611310611abc565b146103765760405162461bcd60e51b8152602060048201526019602482015278149958da5c1a595b9d081a5cc81b9bdd08185c1c1c9bdd9959603a1b60448201526064016103ca565b60006113658383610c73565b6113e55760008381526009602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561139d3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161035a565b50600061035a565b60006113f98383610c73565b156113e55760008381526009602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161035a565b6002600a540361147d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600a55565b6001600160a01b0384163014806114c7575060016001600160a01b03851660009081526008602052604090205460ff1660028111156114c5576114c5611abc565b145b61150f5760405162461bcd60e51b8152602060048201526019602482015278149958da5c1a595b9d081a5cc81b9bdd08185c1c1c9bdd9959603a1b60448201526064016103ca565b6004546001600160a01b0390811690831603610376576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115909190611d18565b60055490915015806115ad57506005546115aa8286611f60565b11155b610a625760405162461bcd60e51b815260206004820152601260248201527113585e08185b5bdd5b9d081c995858da195960721b60448201526064016103ca565b6115f88282610c73565b6116275760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016103ca565b5050565b60006020828403121561163d57600080fd5b81356001600160e01b03198116811461165557600080fd5b9392505050565b80356001600160a01b038116811461167357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156116b1576116b1611678565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116e0576116e0611678565b604052919050565b600082601f8301126116f957600080fd5b813567ffffffffffffffff81111561171357611713611678565b611726601f8201601f19166020016116b7565b81815284602083860101111561173b57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561176d57600080fd5b6117768461165c565b9250602084013567ffffffffffffffff8082111561179357600080fd5b61179f878388016116e8565b935060408601359150808211156117b557600080fd5b506117c2868287016116e8565b9150509250925092565b6000602082840312156117de57600080fd5b5035919050565b600067ffffffffffffffff8211156117ff576117ff611678565b5060051b60200190565b600082601f83011261181a57600080fd5b8135602061182f61182a836117e5565b6116b7565b82815260059290921b8401810191818101908684111561184e57600080fd5b8286015b84811015611870576118638161165c565b8352918301918301611852565b509695505050505050565b600082601f83011261188c57600080fd5b8135602061189c61182a836117e5565b82815260059290921b840181019181810190868411156118bb57600080fd5b8286015b8481101561187057803567ffffffffffffffff8111156118df5760008081fd5b6118ed8986838b01016116e8565b8452509183019183016118bf565b6000806000806080858703121561191157600080fd5b843567ffffffffffffffff8082111561192957600080fd5b61193588838901611809565b955060209150818701358181111561194c57600080fd5b8701601f8101891361195d57600080fd5b803561196b61182a826117e5565b81815260059190911b8201840190848101908b83111561198a57600080fd5b928501925b828410156119a85783358252928501929085019061198f565b97506119ba925050506040880161165c565b935060608701359150808211156119d057600080fd5b506119dd8782880161187b565b91505092959194509250565b600080604083850312156119fc57600080fd5b82359150611a0c6020840161165c565b90509250929050565b6000815180845260005b81811015611a3b57602081850181015186830182015201611a1f565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090611a9690830184611a15565b979650505050505050565b600060208284031215611ab357600080fd5b6116558261165c565b634e487b7160e01b600052602160045260246000fd5b600060038610611af257634e487b7160e01b600052602160045260246000fd5b8582526001600160a01b0385166020830152608060408301819052611b1990830185611a15565b8281036060840152611a968185611a15565b600082601f830112611b3c57600080fd5b81356020611b4c61182a836117e5565b82815260059290921b84018101918181019086841115611b6b57600080fd5b8286015b8481101561187057803567ffffffffffffffff81168114611b905760008081fd5b8352918301918301611b6f565b60008083601f840112611baf57600080fd5b50813567ffffffffffffffff811115611bc757600080fd5b602083019150836020828501011115611bdf57600080fd5b9250929050565b600080600060408486031215611bfb57600080fd5b833567ffffffffffffffff80821115611c1357600080fd5b9085019060e08288031215611c2757600080fd5b611c2f61168e565b611c388361165c565b8152602083013582811115611c4c57600080fd5b611c5889828601611809565b602083015250611c6a6040840161165c565b6040820152611c7b6060840161165c565b60608201526080830135608082015260a083013582811115611c9c57600080fd5b611ca889828601611b2b565b60a08301525060c083013582811115611cc057600080fd5b611ccc898286016116e8565b60c08301525094506020860135915080821115611ce857600080fd5b50611cf586828701611b9d565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d2a57600080fd5b5051919050565b600060208284031215611d4357600080fd5b8151801515811461165557600080fd5b8381526001600160a01b0383166020820152606060408201819052600090611d7d90830184611a15565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611dae57611dae611d86565b5060010190565b60208082526026908201527f416c726561647920617070726f766564206f72206e6f742072656769737465726040820152651959081e595d60d21b606082015260800190565b600181811c90821680611e0f57607f821691505b602082108103611e2f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561077a57600081815260208120601f850160051c81016020861015611e5c5750805b601f850160051c820191505b8181101561071a57828155600101611e68565b815167ffffffffffffffff811115611e9557611e95611678565b611ea981611ea38454611dfb565b84611e35565b602080601f831160018114611ede5760008415611ec65750858301515b600019600386901b1c1916600185901b17855561071a565b600085815260208120601f198616915b82811015611f0d57888601518255948401946001909101908401611eee565b5085821015611f2b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000611f4e6040830185611a15565b8281036020840152611d7d8185611a15565b8082018082111561035a5761035a611d8656fea26469706673582212207416dae1412c0fea3d169413f3b00f142630914678c3a66a9de5cb0a4055d8a964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806379b881af116100b8578063ab21f5071161007c578063ab21f507146102b7578063c922da54146102ca578063d547741f146102dd578063eede8aea146102f0578063f2e330d814610303578063f96423561461031657600080fd5b806379b881af1461025357806391d1485414610266578063942e6bcf146102795780639cdd2f9a1461029c578063a217fddf146102af57600080fd5b806336568abe1161010a57806336568abe146101db57806358086775146101ee5780635cf90985146102015780635e5de15114610214578063747ffca21461022757806379502c551461023a57600080fd5b806301ffc9a7146101475780630d17579a1461016f578063248a9ca3146101845780632628fb1c146101b55780632f2ff15d146101c8575b600080fd5b61015a61015536600461162b565b610329565b60405190151581526020015b60405180910390f35b61018261017d366004611758565b610360565b005b6101a76101923660046117cc565b60009081526009602052604090206001015490565b604051908152602001610166565b6101826101c33660046118fb565b61037c565b6101826101d63660046119e9565b610722565b6101826101e93660046119e9565b610747565b6101826101fc366004611758565b61077f565b61018261020f366004611758565b61078a565b610182610222366004611758565b6108e0565b6101826102353660046118fb565b6109cb565b610242610a69565b604051610166959493929190611a5b565b610182610261366004611758565b610b1c565b61015a6102743660046119e9565b610c73565b61028c610287366004611aa1565b610c9e565b6040516101669493929190611ad2565b6101826102aa3660046118fb565b610de5565b6101a7600081565b6101826102c5366004611be6565b6110e1565b6101826102d8366004611758565b61113d565b6101826102eb3660046119e9565b611148565b6101826102fe3660046118fb565b61116d565b610182610311366004611758565b611228565b610182610324366004611758565b6112be565b60006001600160e01b03198216637965db0b60e01b148061035a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061036b816112d4565b610376848484611228565b50505050565b8351801580159061038d5750835181145b6103d35760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064015b60405180910390fd5b60005b8181101561071a576000835182106103fd5760405180602001604052806000815250610418565b83828151811061040f5761040f611d02565b60200260200101515b905060006001600160a01b031687838151811061043757610437611d02565b60200260200101516001600160a01b0316036104915760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103ca565b60008683815181106104a5576104a5611d02565b602002602001015111801561053a57506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611d18565b86838151811061052f5761052f611d02565b602002602001015111155b6105905760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973207a65726f206f7220657863656564732062616c616e636044820152606560f81b60648201526084016103ca565b6105ce8783815181106105a5576105a5611d02565b60200260200101518784815181106105bf576105bf611d02565b602002602001015187846112e1565b846001600160a01b031663a9059cbb8884815181106105ef576105ef611d02565b602002602001015188858151811061060957610609611d02565b60200260200101516040518363ffffffff1660e01b81526004016106429291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190611d31565b5086828151811061069857610698611d02565b60200260200101516001600160a01b0316306001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b758885815181106106e6576106e6611d02565b602002602001015188856040516106ff93929190611d53565b60405180910390a3508061071281611d9c565b9150506103d6565b505050505050565b60008281526009602052604090206001015461073d816112d4565b6103768383611359565b6001600160a01b03811633146107705760405163334bd91960e11b815260040160405180910390fd5b61077a82826113ed565b505050565b61077a838383610b1c565b6001600160a01b03831660009081526008602052604081205460ff1660028111156107b7576107b7611abc565b146107d45760405162461bcd60e51b81526004016103ca90611db5565b6001600160a01b0383811660009081526008602052604090205461010090041633146108425760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206f776e657220746f2075706461746500000000000000000060448201526064016103ca565b6001600160a01b03831660009081526008602052604090206001016108678382611e7b565b506001600160a01b038316600090815260086020526040902060020161088d8282611e7b565b50336001600160a01b0316836001600160a01b03167f639b764af06689bf35c6ebc1ae49051aa4b4d3a3d34d5c70bf8626087352e99d84846040516108d3929190611f3b565b60405180910390a3505050565b6001600160a01b038316600090815260086020526040812090815460ff16600281111561090f5761090f611abc565b148061093057506001815460ff16600281111561092e5761092e611abc565b145b6109735760405162461bcd60e51b8152602060048201526014602482015273105b1c9958591e4819195c9959da5cdd195c995960621b60448201526064016103ca565b805460ff1916600217815560405133906001600160a01b038616907f11d876319772a42984e532feb89f8d20206a23ba4b556142b7cdfc277efc8435906109bd9087908790611f3b565b60405180910390a350505050565b60006109d6816112d4565b6109de61145a565b6004546001600160a01b03848116911614610a4c5760405162461bcd60e51b815260206004820152602860248201527f446973747269627574696f6e73206d757374206265206469737472696275746960448201526737b7103a37b5b2b760c11b60648201526084016103ca565b610a588585858561037c565b610a626001600a55565b5050505050565b60018054600354600454600554600780546001600160a01b039586169694861695909316939192610a9990611dfb565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac590611dfb565b8015610b125780601f10610ae757610100808354040283529160200191610b12565b820191906000526020600020905b815481529060010190602001808311610af557829003601f168201915b5050505050905085565b6001600160a01b0383811660009081526008602052604090205461010090041615610b7e5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016103ca565b60408051608081018252600080825233602080840191909152828401869052606083018590526001600160a01b0387168252600890529190912081518154829060ff19166001836002811115610bd657610bd6611abc565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b031990911617815560408201516001820190610c159082611e7b565b5060608201516002820190610c2a9082611e7b565b50905050336001600160a01b0316836001600160a01b03167f99202cc5abf24650e7ac53e3a81ff614768dcc7569a245376ed82eb4ce243fca84846040516108d3929190611f3b565b60009182526009602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6008602052600090815260409020805460018201805460ff8316936101009093046001600160a01b0316929190610cd490611dfb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0090611dfb565b8015610d4d5780601f10610d2257610100808354040283529160200191610d4d565b820191906000526020600020905b815481529060010190602001808311610d3057829003601f168201915b505050505090806002018054610d6290611dfb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e90611dfb565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b5050505050905084565b83518015801590610df65750835181145b610e375760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103ca565b60005b8181101561071a57600083518210610e615760405180602001604052806000815250610e7c565b838281518110610e7357610e73611d02565b60200260200101515b905060006001600160a01b0316878381518110610e9b57610e9b611d02565b60200260200101516001600160a01b031603610ef55760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103ca565b6000868381518110610f0957610f09611d02565b602002602001015111610f4f5760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016103ca565b610f8d878381518110610f6457610f64611d02565b6020026020010151878481518110610f7e57610f7e611d02565b60200260200101518784611484565b846001600160a01b03166323b872dd33898581518110610faf57610faf611d02565b6020026020010151898681518110610fc957610fc9611d02565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c9190611d31565b5086828151811061105f5761105f611d02565b60200260200101516001600160a01b0316336001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b758885815181106110ad576110ad611d02565b602002602001015188856040516110c693929190611d53565b60405180910390a350806110d981611d9c565b915050610e3a565b82516110ef90600090611359565b5060005b8360200151518110156103765761112a6000801b8560200151838151811061111d5761111d611d02565b6020026020010151611359565b508061113581611d9c565b9150506110f3565b61077a83838361078a565b600082815260096020526040902060010154611163816112d4565b61037683836113ed565b61117561145a565b6003546001600160a01b038381169116148061119e57506004546001600160a01b038381169116145b611212576040805162461bcd60e51b81526020600482015260248101919091527f416c6c6f636174696f6e7320746f2070726f6a65637473206d7573742062652060448201527f616c6c6f636174696f6e206f7220646973747269627574696f6e20746f6b656e60648201526084016103ca565b61121e84848484610de5565b6103766001600a55565b6001600160a01b038316600090815260086020526040812090815460ff16600281111561125757611257611abc565b146112745760405162461bcd60e51b81526004016103ca90611db5565b805460ff1916600117815560405133906001600160a01b038616907f07597d52fbe13ba7ca9294f77eecd20c5d40bcd8752753651f416e64a0f7d77c906109bd9087908790611f3b565b60006112c9816112d4565b6103768484846108e0565b6112de81336115ee565b50565b60016001600160a01b03851660009081526008602052604090205460ff16600281111561131057611310611abc565b146103765760405162461bcd60e51b8152602060048201526019602482015278149958da5c1a595b9d081a5cc81b9bdd08185c1c1c9bdd9959603a1b60448201526064016103ca565b60006113658383610c73565b6113e55760008381526009602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561139d3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161035a565b50600061035a565b60006113f98383610c73565b156113e55760008381526009602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161035a565b6002600a540361147d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600a55565b6001600160a01b0384163014806114c7575060016001600160a01b03851660009081526008602052604090205460ff1660028111156114c5576114c5611abc565b145b61150f5760405162461bcd60e51b8152602060048201526019602482015278149958da5c1a595b9d081a5cc81b9bdd08185c1c1c9bdd9959603a1b60448201526064016103ca565b6004546001600160a01b0390811690831603610376576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115909190611d18565b60055490915015806115ad57506005546115aa8286611f60565b11155b610a625760405162461bcd60e51b815260206004820152601260248201527113585e08185b5bdd5b9d081c995858da195960721b60448201526064016103ca565b6115f88282610c73565b6116275760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016103ca565b5050565b60006020828403121561163d57600080fd5b81356001600160e01b03198116811461165557600080fd5b9392505050565b80356001600160a01b038116811461167357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156116b1576116b1611678565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116e0576116e0611678565b604052919050565b600082601f8301126116f957600080fd5b813567ffffffffffffffff81111561171357611713611678565b611726601f8201601f19166020016116b7565b81815284602083860101111561173b57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561176d57600080fd5b6117768461165c565b9250602084013567ffffffffffffffff8082111561179357600080fd5b61179f878388016116e8565b935060408601359150808211156117b557600080fd5b506117c2868287016116e8565b9150509250925092565b6000602082840312156117de57600080fd5b5035919050565b600067ffffffffffffffff8211156117ff576117ff611678565b5060051b60200190565b600082601f83011261181a57600080fd5b8135602061182f61182a836117e5565b6116b7565b82815260059290921b8401810191818101908684111561184e57600080fd5b8286015b84811015611870576118638161165c565b8352918301918301611852565b509695505050505050565b600082601f83011261188c57600080fd5b8135602061189c61182a836117e5565b82815260059290921b840181019181810190868411156118bb57600080fd5b8286015b8481101561187057803567ffffffffffffffff8111156118df5760008081fd5b6118ed8986838b01016116e8565b8452509183019183016118bf565b6000806000806080858703121561191157600080fd5b843567ffffffffffffffff8082111561192957600080fd5b61193588838901611809565b955060209150818701358181111561194c57600080fd5b8701601f8101891361195d57600080fd5b803561196b61182a826117e5565b81815260059190911b8201840190848101908b83111561198a57600080fd5b928501925b828410156119a85783358252928501929085019061198f565b97506119ba925050506040880161165c565b935060608701359150808211156119d057600080fd5b506119dd8782880161187b565b91505092959194509250565b600080604083850312156119fc57600080fd5b82359150611a0c6020840161165c565b90509250929050565b6000815180845260005b81811015611a3b57602081850181015186830182015201611a1f565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090611a9690830184611a15565b979650505050505050565b600060208284031215611ab357600080fd5b6116558261165c565b634e487b7160e01b600052602160045260246000fd5b600060038610611af257634e487b7160e01b600052602160045260246000fd5b8582526001600160a01b0385166020830152608060408301819052611b1990830185611a15565b8281036060840152611a968185611a15565b600082601f830112611b3c57600080fd5b81356020611b4c61182a836117e5565b82815260059290921b84018101918181019086841115611b6b57600080fd5b8286015b8481101561187057803567ffffffffffffffff81168114611b905760008081fd5b8352918301918301611b6f565b60008083601f840112611baf57600080fd5b50813567ffffffffffffffff811115611bc757600080fd5b602083019150836020828501011115611bdf57600080fd5b9250929050565b600080600060408486031215611bfb57600080fd5b833567ffffffffffffffff80821115611c1357600080fd5b9085019060e08288031215611c2757600080fd5b611c2f61168e565b611c388361165c565b8152602083013582811115611c4c57600080fd5b611c5889828601611809565b602083015250611c6a6040840161165c565b6040820152611c7b6060840161165c565b60608201526080830135608082015260a083013582811115611c9c57600080fd5b611ca889828601611b2b565b60a08301525060c083013582811115611cc057600080fd5b611ccc898286016116e8565b60c08301525094506020860135915080821115611ce857600080fd5b50611cf586828701611b9d565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d2a57600080fd5b5051919050565b600060208284031215611d4357600080fd5b8151801515811461165557600080fd5b8381526001600160a01b0383166020820152606060408201819052600090611d7d90830184611a15565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611dae57611dae611d86565b5060010190565b60208082526026908201527f416c726561647920617070726f766564206f72206e6f742072656769737465726040820152651959081e595d60d21b606082015260800190565b600181811c90821680611e0f57607f821691505b602082108103611e2f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561077a57600081815260208120601f850160051c81016020861015611e5c5750805b601f850160051c820191505b8181101561071a57828155600101611e68565b815167ffffffffffffffff811115611e9557611e95611678565b611ea981611ea38454611dfb565b84611e35565b602080601f831160018114611ede5760008415611ec65750858301515b600019600386901b1c1916600185901b17855561071a565b600085815260208120601f198616915b82811015611f0d57888601518255948401946001909101908401611eee565b5085821015611f2b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000611f4e6040830185611a15565b8281036020840152611d7d8185611a15565b8082018082111561035a5761035a611d8656fea26469706673582212207416dae1412c0fea3d169413f3b00f142630914678c3a66a9de5cb0a4055d8a964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1421,
        "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1424,
        "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolConfig)1276_storage"
      },
      {
        "astId": 1429,
        "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
        "label": "registrations",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Registration)1290_storage)"
      },
      {
        "astId": 26,
        "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
        "label": "_roles",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1161,
        "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)1280": {
        "encoding": "inplace",
        "label": "enum IPool.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Registration)1290_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPool.Registration)",
        "numberOfBytes": "32",
        "value": "t_struct(Registration)1290_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolConfig)1276_storage": {
        "encoding": "inplace",
        "label": "struct PoolConfig",
        "members": [
          {
            "astId": 1261,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1264,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "admins",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1266,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "allocationToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1268,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "distributionToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1270,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "maxAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1273,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "timestamps",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint64)dyn_storage"
          },
          {
            "astId": 1275,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "metadataURI",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Registration)1290_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Registration",
        "members": [
          {
            "astId": 1283,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)1280"
          },
          {
            "astId": 1285,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1287,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1289,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/strategies/RetroFunding.sol:RetroFunding",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}